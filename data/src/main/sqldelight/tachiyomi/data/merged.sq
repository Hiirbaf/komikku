import kotlin.Boolean;

CREATE TABLE merged(
    _id INTEGER NOT NULL PRIMARY KEY,
    info_anime INTEGER AS Boolean NOT NULL,
    get_episode_updates INTEGER AS Boolean NOT NULL,
    episode_sort_mode INTEGER NOT NULL,
    episode_priority INTEGER NOT NULL,
    download_episodes INTEGER AS Boolean NOT NULL,
    merge_id INTEGER NOT NULL,
    merge_url TEXT NOT NULL,
    anime_id INTEGER,
    anime_url TEXT NOT NULL,
    anime_source INTEGER NOT NULL,
    FOREIGN KEY(anime_id) REFERENCES animes (_id)
    ON DELETE SET NULL,
    FOREIGN KEY(merge_id) REFERENCES animes (_id)
    ON DELETE CASCADE
);

CREATE INDEX merged_merge_id_index ON merged(merge_id);

selectByMergeId:
SELECT * FROM merged WHERE merge_id = ?;

selectByMergeUrl:
SELECT * FROM merged WHERE merge_url = ?;

deleteByMergeId:
DELETE FROM merged WHERE merge_id = ?;

selectMergedAnimesById:
SELECT animes.*
FROM (
    SELECT anime_id FROM merged WHERE merge_id = ?
) AS A
JOIN animes
ON animes._id = A.anime_id;

selectMergedAnimesForDownloadingById:
SELECT animes.*
FROM (
    SELECT anime_id FROM merged WHERE merge_id = ? AND download_episodes = 1
) AS A
JOIN animes
ON animes._id = A.anime_id;

selectMergedAnimesByUrl:
SELECT animes.*
FROM (
    SELECT anime_id FROM merged WHERE merge_url = ?
) AS A
JOIN animes
ON animes._id = A.anime_id;

selectAllMergedAnimes:
SELECT animes.*
FROM (
    SELECT anime_id FROM merged
) AS A
JOIN animes
ON animes._id = A.anime_id;

deleteByMergeUrl:
DELETE FROM merged WHERE merge_url = ?;

selectAll:
SELECT * FROM merged;

selectEpisodesByMergedId:
SELECT episodes.*
FROM (
    SELECT anime_id FROM merged WHERE merge_id = ?
) AS A
JOIN episodes
ON episodes.anime_id = A.anime_id;

insert:
INSERT INTO merged(
    info_anime,
    get_episode_updates,
    episode_sort_mode,
    episode_priority,
    download_episodes,
    merge_id,
    merge_url,
    anime_id,
    anime_url,
    anime_source
)
VALUES (
    :infoAnime,
    :getEpisodeUpdates,
    :episodeSortMode,
    :episodePriority,
    :downloadEpisodes,
    :mergeId,
    :mergeUrl,
    :animeId,
    :animeUrl,
    :animeSource
);

updateSettingsById:
UPDATE merged
SET
    get_episode_updates = coalesce(:getEpisodeUpdates, get_episode_updates),
    download_episodes = coalesce(:downloadEpisodes, download_episodes),
    info_anime = coalesce(:infoAnime, info_anime),
    episode_priority = coalesce(:episodePriority, episode_priority),
    episode_sort_mode = coalesce(:episodeSortMode, episode_sort_mode)
WHERE _id = :id;

deleteById:
DELETE FROM merged WHERE _id = ?;

deleteAll:
DELETE FROM merged;

selectLastInsertedRowId:
SELECT last_insert_rowid();